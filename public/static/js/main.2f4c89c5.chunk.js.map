{"version":3,"sources":["GiphyImg.js","GiphyApp.js","DateInput.js","App.js","serviceWorker.js","index.js"],"names":["GiphyImg","source","className","src","GiphyApp","props","_getGiphy","a","axios","get","result","console","log","setState","giphy","images","downsized_large","url","state","onClick","this","React","Component","TodayDate","_handleDate","text","date","_sleeps","today","Date","joeDay","newDays","Math","ceil","getTime","days","onChange","event","target","value","type","min","max","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUAUeA,MARf,YAA6B,IAAVC,EAAS,EAATA,OACf,OACI,yBAAKC,UAAU,gBACX,yBAAKC,IAAKF,MC0CPG,E,YAxCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KA8BVC,UA/BmB,sBA+BP,4BAAAC,EAAA,sEACaC,IAAMC,IAnClB,cAkCD,OACFC,EADE,OAERC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVC,MAAOJ,EAAOK,OAAOC,gBAAgBC,MAJjC,2CA7BR,EAAKC,MAAQ,CACTJ,MAAO,IAHI,E,sEAqBf,OACI,6BACI,4BAAQK,QAASC,KAAKd,WAAtB,aACA,6BACA,6BACA,kBAAC,EAAD,CAAUL,OAAQmB,KAAKF,MAAMJ,a,GA3BtBO,IAAMC,WCJRC,E,YACjB,WAAYlB,GAAQ,IAAD,8BACf,4CAAMA,KAmBVmB,YAAc,SAACC,GACX,EAAKZ,SAAS,CACVa,KAAMD,IACP,kBAAM,EAAKE,cAvBC,EA0BnBA,QAAU,WACN,IAAMC,EAAQ,IAAIC,KACZC,EAAS,IAAID,KAAK,EAAKX,MAAMQ,MAC7BK,EAAUC,KAAKC,MAAMH,EAAOI,UAAYN,EAAMM,WAA1B,OAC1B,EAAKrB,SAAS,CACVsB,KAAMJ,EAAU,KA5BpB,EAAKb,MAAQ,CACTU,MAAO,GACPF,KAAM,GACNS,KAAM,IANK,E,sEAUT,IAAD,OACL,OACA,6BACI,oEACA,2BAAOC,SAAU,SAAAC,GAAK,OAAI,EAAKb,YAAYa,EAAMC,OAAOC,QAAQC,KAAK,OAAOD,MAAOnB,KAAKF,MAAMQ,KAAMe,IAAI,aAAaC,IAAI,eACzH,2BAAItB,KAAKF,MAAMiB,KAAX,oBAA+Bf,KAAKF,MAAMiB,KAA1C,6BAA2E,S,GAhBpDd,IAAMC,WCY9BqB,MATf,WACE,OACE,yBAAKzC,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.2f4c89c5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction GiphyImg({source}) {\n    return(\n        <div className=\"pictureFrame\">\n            <img src={source} />\n        </div>\n    );\n}\n\nexport default GiphyImg;","import React from 'react';\nimport axios from 'axios';\nimport GiphyImg from './GiphyImg';\n\nconst giphyUrl = '/api/giphy';\n\nclass GiphyApp extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            giphy: \"\"\n        };\n    }\n    /*\n    Need a button, when you click the button, it runs a helper function\n    - To begin with console.log inside your helper function\n\n    Some state\n    - Make an array of strings\n    \n    update your helper function\n    - when you click, it should add the string \"hello\" to the array\n\n    Confirm that it is working correctly\n    - Open the component inspector\n    - Make sure that the state array should get another hello string added to it every time you click the button\n    */\n    render() {\n        return(\n            <div>\n                <button onClick={this._getGiphy}>Miss you!</button>\n                <br />\n                <br />\n                <GiphyImg source={this.state.giphy} />\n            </div>\n        );\n    }\n\n    _getGiphy = async () => {\n        const result = await axios.get(giphyUrl);\n        console.log(result);\n        this.setState({\n            giphy: result.images.downsized_large.url\n            });\n    }\n}\n\nexport default GiphyApp;","import React from 'react';\n\nexport default class TodayDate extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            today: \"\",\n            date: \"\",\n            days: ''\n        }\n    }\n\n    render() {\n        return (\n        <div>\n            <h2>Select the next day you will see Joe</h2>\n            <input onChange={event => this._handleDate(event.target.value)} type=\"date\" value={this.state.date} min='2020-02-14' max=\"2020-12-31\" ></input>\n            <p>{this.state.days ? `There are ${this.state.days} sleeps until you see Joe`: ''}</p>\n        </div>\n        )\n    }\n\n    _handleDate = (text) => {\n        this.setState({\n            date: text\n        }, () => this._sleeps())\n    }\n\n    _sleeps = () => {\n        const today = new Date();\n        const joeDay = new Date(this.state.date);\n        const newDays = Math.ceil((joeDay.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n        this.setState({\n            days: newDays + 1\n    })\n}\n}","import React from 'react';\nimport './App.css';\nimport GiphyApp from './GiphyApp';\nimport DateInput from './DateInput';\n\nfunction App() {\n  return (\n    <div className=\"App App-header\">\n      <DateInput />\n      <GiphyApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}